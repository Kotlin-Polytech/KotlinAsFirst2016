@file:Suppress("UNUSED_PARAMETER")

package lesson5.task1

/**
 * Пример
 *
 * Время представлено строкой вида "11:34:45", содержащей часы, минуты и секунды, разделённые двоеточием.
 * Разобрать эту строку и рассчитать количество секунд, прошедшее с начала дня.
 */
fun timeStrToSeconds(str: String): Int {
    val parts = str.split(":")
    var result = 0
    for (part in parts) {
        val number = part.toInt()
        result = result * 60 + number
    }
    return result
}

fun twoDigitStr(n: Int) = if (n in 0..9) "0$n" else "$n"

/**
 * Пример
 *
 * Дано seconds -- время в секундах, прошедшее с начала дня.
 * Вернуть текущее время в виде строки в формате "ЧЧ:ММ:СС".
 */
fun timeSecondsToStr(seconds: Int): String {
    val hour = seconds / 3600
    val minute = (seconds % 3600) / 60
    val second = seconds % 60
    return String.format("%02d:%02d:%02d", hour, minute, second)
}

/**
 * Пример: консольный ввод
 */
fun main(args: Array<String>) {
    println("Введите время в формате ЧЧ:ММ:СС")
    val line = readLine()
    if (line != null) {
        val seconds = timeStrToSeconds(line)
        if (seconds == -1) {
            println("Введённая строка $line не соответствует формату ЧЧ:ММ:СС")
        } else {
            println("Прошло секунд с начала суток: $seconds")
        }
    } else {
        println("Достигнут <конец файла> в процессе чтения строки. Программа прервана")
    }
}


//var month = listOf<String>("января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря")

/**
 * Средняя
 *
 * Дата представлена строкой вида "15 июля 2016".
 * Перевести её в цифровой формат "15.07.2016".
 * День и месяц всегда представлять двумя цифрами, например: 03.04.2011.
 * При неверном формате входной строки вернуть пустую строку
 */
fun formatStringToDateStrToDigit(str: String): Boolean {
    val parts = str.split(" ")
    var n = 0
    var temp = ""
    var temp2 = ""
    for (part in parts) {
        if (n == 3) n += 100
        if ((n == 2) && (part >= "0")) {
            n += 1
            if ((part.toInt() % 4 != 0) && (temp2 == "февраля") && (temp == "29")) n += 100
        }
        if (n == 1) {
            when {
                (part == "января") && ((temp <= "31")) -> n += 1
                (part == "февраля") && ((temp <= "29")) -> n += 1
                (part == "марта") && ((temp <= "31")) -> n += 1
                (part == "апреля") && ((temp <= "30")) -> n += 1
                (part == "мая") && ((temp <= "31")) -> n += 1
                (part == "июня") && ((temp <= "30")) -> n += 1
                (part == "июля") && ((temp <= "31")) -> n += 1
                (part == "августа") && ((temp <= "31")) -> n += 1
                (part == "сентября") && ((temp <= "30")) -> n += 1
                (part == "октября") && ((temp <= "31")) -> n += 1
                (part == "ноября") && ((temp <= "30")) -> n += 1
                (part == "декабря") && ((temp <= "31")) -> n += 1
            }
            temp2 = part
        }
        if ((n == 0) && ((part >= "1") || (part >= "01")) && (part < "32")) {
            n += 1
            temp = part
        }
    }
    return if (n == 3) true
    else false
}


fun dateStrToDigit(str: String): String {
    val parts = str.split(" ")
    var result = ""
    var f = 0
    if (formatStringToDateStrToDigit(str)) {
        for (part in parts) {
            f += 1
            val number = part
            result += when {
                (f <= 2) && ((number == "января") || (number == "1") || (number == "01")) -> "01."
                (f <= 2) && ((number == "февраля") || (number == "2") || (number == "02")) -> "02."
                (f <= 2) && ((number == "марта") || (number == "3") || (number == "03")) -> "03."
                (f <= 2) && ((number == "апреля") || (number == "4") || (number == "04")) -> "04."
                (f <= 2) && ((number == "мая") || (number == "5") || (number == "05")) -> "05."
                (f <= 2) && ((number == "июня") || (number == "6") || (number == "06")) -> "06."
                (f <= 2) && ((number == "июля") || (number == "7") || (number == "07")) -> "07."
                (f <= 2) && ((number == "августа") || (number == "8") || (number == "08")) -> "08."
                (f <= 2) && ((number == "сентября") || (number == "9") || (number == "09")) -> "09."
                (number == "октября") -> "10."
                (number == "ноября") -> "11."
                (number == "декабря") -> "12."
                ((number >= "10") && (f == 1)) -> "$number."
                else -> "$number"
            }
        }
        return result
    } else return ""
}

/**
 * Средняя
 *
 * Дата представлена строкой вида "15.07.2016".
 * Перевести её в строковый формат вида "15 июля 2016".
 * При неверном формате входной строки вернуть пустую строку
 */

fun formatStringToDateDigitToStr(str: String): Boolean {
    val parts = str.split(".")
    var n = 0
    var temp = ""
    var temp2 = ""
    for (part in parts) {
        if (n == 3) n += 100
        if ((n == 2) && (part >= "0")) {
            n += 1
            if ((part.toInt() % 4 != 0) && (temp2 == "02") && (temp == "29")) n += 100
        }
        if (n == 1) {
            when {
                (part == "01") && (temp <= "31") -> n += 1
                (part == "02") && (temp <= "29") -> n += 1
                (part == "03") && (temp <= "31") -> n += 1
                (part == "04") && (temp <= "30") -> n += 1
                (part == "05") && (temp <= "31") -> n += 1
                (part == "06") && (temp <= "30") -> n += 1
                (part == "07") && (temp <= "31") -> n += 1
                (part == "08") && (temp <= "31") -> n += 1
                (part == "09") && (temp <= "30") -> n += 1
                (part == "10") && (temp <= "31") -> n += 1
                (part == "11") && (temp <= "30") -> n += 1
                (part == "12") && (temp <= "31") -> n += 1
            }
            temp2 = part
        }
        if ((n == 0) && (part >= "01") && (part < "32")) {
            n += 1
            temp = part
        }
    }
    return if (n == 3) true
    else false
}


fun dateDigitToStr(digital: String): String {
    val parts = digital.split(".")
    var result = ""
    var f = 0
    if (formatStringToDateDigitToStr(digital)) {
        for (part in parts) {
            f += 1
            val number = part
            result += when {
                (number == "01") && (f == 2) -> " января "
                (number == "02") && (f == 2) -> " февраля "
                (number == "03") && (f == 2) -> " марта "
                (number == "04") && (f == 2) -> " апреля "
                (number == "05") && (f == 2) -> " мая "
                (number == "06") && (f == 2) -> " июня "
                (number == "07") && (f == 2) -> " июля "
                (number == "08") && (f == 2) -> " августа "
                (number == "09") && (f == 2) -> " сентября "
                (number == "10") && (f == 2) -> " октября "
                (number == "11") && (f == 2) -> " ноября "
                (number == "12") && (f == 2) -> " декабря "
                (number == "01") && (f == 1) -> "1"
                (number == "02") && (f == 1) -> "2"
                (number == "03") && (f == 1) -> "3"
                (number == "04") && (f == 1) -> "4"
                (number == "05") && (f == 1) -> "5"
                (number == "06") && (f == 1) -> "6"
                (number == "07") && (f == 1) -> "7"
                (number == "08") && (f == 1) -> "8"
                (number == "09") && (f == 1) -> "9"
                else -> "$number"
            }
        }
        return result
    } else return ""
}


/**
 * Сложная
 *
 * Номер телефона задан строкой вида "+7 (921) 123-45-67".
 * Префикс (+7) может отсутствовать, код города (в скобках) также может отсутствовать.
 * Может присутствовать неограниченное количество пробелов и чёрточек,
 * например, номер 12 --  34- 5 -- 67 -98 тоже следует считать легальным.
 * Перевести номер в формат без скобок, пробелов и чёрточек (но с +), например,
 * "+79211234567" или "123456789" для приведённых примеров.
 * Все символы в номере, кроме цифр, пробелов и +-(), считать недопустимыми.
 * При неверном формате вернуть пустую строку
 */
var phoneList = listOf<Char>('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ', '+', '-', '(', ')')

fun formatStringForFlattenPhoneNumber(phone: String): Boolean {
    var n = 0
    for (i in 0..phone.length - 1)
        if (phone[i] in phoneList) {
            n += 1
        } else break
    return if (n == phone.length) true
    else false
}

fun flattenPhoneNumber(phone: String): String {
    var f = 0
    var result = ""
    if (formatStringForFlattenPhoneNumber(phone)) {
        for (i in 0..phone.length - 1) {
            if ((phone[i] in '0'..'9') || ((phone[i] == '+') && (f == 0))) {
                result += phone[i]
                f = 1
            }
        }
        return result
    } else return ""
}

/**
 * Средняя
 *
 * Результаты спортсмена на соревнованиях в прыжках в длину представлены строкой вида
 * "706 - % 717 % 703".
 * В строке могут присутствовать числа, черточки - и знаки процента %, разделённые пробелами;
 * число соответствует удачному прыжку, - пропущенной попытке, % заступу.
 * Прочитать строку и вернуть максимальное присутствующее в ней число (717 в примере).
 * При нарушении формата входной строки или при отсутствии в ней чисел, вернуть -1.
 */


fun formatStringForBestLongJump(jumps: String): Boolean {
    var numbers = 0
    var f = 0
    for (i in 0..jumps.length - 1) {
        if (jumps[i] in '0'..'9') {
            numbers += 1
        } else if ((jumps[i] != ' ') && (jumps[i] != '%') && (jumps[i] != '-')) {
            f = -1
            break
        }
    }
    return if ((f == -1) || (numbers == 0)) false
    else true
}

fun comparison(str1: String, str2: String): Boolean {
    var f1 = 0
    if (str1.length == str2.length) {
        for (i in 0..str1.length - 1) {
            if (str1[i] >= str2[i]) {
                if (str1[i] > str2[i]) {
                    f1 += 1
                    break
                }
            } else {
                if (f1 == 0){
                    break
                }
            }
        }
        return if (f1 == 0) false
        else true
    } else return if (str1.length > str2.length) true
    else false
}

fun bestLongJump(jumps: String): Int {
    var number = ""
    var numberTemp = ""
    var f = 0
    if (formatStringForBestLongJump(jumps)) {
        for (i in 0..jumps.length - 1) {
            if (jumps[i] in '0'..'9') numberTemp += jumps[i]
            else f = 1
            if ((i == jumps.length - 1) && (jumps[i] in '0'..'9')) f = 1
            if (comparison(numberTemp, number)) {
                if (f == 1) {
                    number = numberTemp
                    numberTemp = ""
                }
            } else if (f == 1) numberTemp = ""
            f = 0
        }
        return number.toInt()
    } else return -1
}

/**
 * Сложная
 *
 * Результаты спортсмена на соревнованиях в прыжках в высоту представлены строкой вида
 * "220 + 224 %+ 228 %- 230 + 232 %%- 234 %".
 * Здесь + соответствует удачной попытке, % неудачной, - пропущенной.
 * Высота и соответствующие ей попытки разделяются пробелом.
 * Прочитать строку и вернуть максимальную взятую высоту (230 в примере).
 * При нарушении формата входной строки вернуть -1.
 */
fun bestHighJump(jumps: String): Int = TODO()

/**
 * Сложная
 *
 * В строке представлено выражение вида "2 + 31 - 40 + 13",
 * использующее целые положительные числа, плюсы и минусы, разделённые пробелами.
 * Наличие двух знаков подряд "13 + + 10" или двух чисел подряд "1 2" не допускается.
 * Вернуть значение выражения (6 для примера).
 * Про нарушении формата входной строки бросить исключение IllegalArgumentException
 */
fun plusMinus(expression: String): Int = TODO()

/**
 * Сложная
 *
 * Строка состоит из набора слов, отделённых друг от друга одним пробелом.
 * Определить, имеются ли в строке повторяющиеся слова, идущие друг за другом.
 * Слова, отличающиеся только регистром, считать совпадающими.
 * Вернуть индекс начала первого повторяющегося слова, или -1, если повторов нет.
 * Пример: "Он пошёл в в школу" => результат 9 (индекс первого 'в')
 */
fun firstDuplicateIndex(str: String): Int = TODO()

/**
 * Сложная
 *
 * Строка содержит названия товаров и цены на них в формате вида
 * "Хлеб 39.9; Молоко 62.5; Курица 184.0; Конфеты 89.9".
 * То есть, название товара отделено от цены пробелом,
 * а цена отделена от названия следующего товара точкой с запятой и пробелом.
 * Вернуть название самого дорогого товара в списке (в примере это Курица),
 * или пустую строку при нарушении формата строки.
 * Все цены должны быть положительными
 */
fun mostExpensive(description: String): String = TODO()

/**
 * Сложная
 *
 * Перевести число roman, заданное в римской системе счисления,
 * в десятичную систему и вернуть как результат.
 * Римские цифры: 1 = I, 4 = IV, 5 = V, 9 = IX, 10 = X, 40 = XL, 50 = L,
 * 90 = XC, 100 = C, 400 = CD, 500 = D, 900 = CM, 1000 = M.
 * Например: XXIII = 23, XLIV = 44, C = 100
 *
 * Вернуть -1, если roman не является корректным римским числом
 */
fun fromRoman(roman: String): Int = TODO()

/**
 * Сложная
 *
 * Имеется специальное устройство, представляющее собой
 * конвейер из cells ячеек (нумеруются от 0 до cells - 1 слева направо) и датчик, двигающийся над этим конвейером.
 * Строка commands содержит последовательность команд, выполняемых данным устройством, например +>+>+>+>+
 * Каждая команда кодируется одним специальным символом:
 *	> - сдвиг датчика вправо на 1 ячейку;
 *  < - сдвиг датчика влево на 1 ячейку;
 *	+ - увеличение значения в ячейке под датчиком на 1 ед.;
 *	- - уменьшение значения в ячейке под датчиком на 1 ед.;
 *	[ - если значение под датчиком равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за следующей командой ']';
 *	] - если значение под датчиком не равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за предыдущей командой '[';
 *	{ - если значение под датчиком равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за следующей командой '}';
 *	} - если значение под датчиком не равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за предыдущей командой '{';
 * (комбинации [] и {} имитируют циклы)
 *
 * Пробел кодирует пустую команду.
 * Все прочие символы следует считать ошибочными и формировать исключение IllegalArgumentException.
 * То же исключение формируется, если у символов [ ] { } не оказывается пары.
 * Выход за границу конвейера также следует считать ошибкой и формировать исключение IllegalStateException.
 * Изначально все ячейки заполнены значением 0 и датчик стоит на ячейке с номером N/2 (округлять вниз)
 *
 * Вернуть список размера cells, содержащий элементы ячеек устройства после выполнения всех команд.
 * Например, для 10 ячеек и командной строки +>+>+>+>+ результат должен быть 0,0,0,0,0,1,1,1,1,1
 */
fun computeDeviceCells(cells: Int, commands: String): List<Int> = TODO()