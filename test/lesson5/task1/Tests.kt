package lesson5.task1

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

class Tests {
    @Test
    @Tag("Example")
    fun timeStrToSeconds() {
        assertEquals(36000, timeStrToSeconds("10:00:00"))
        assertEquals(41685, timeStrToSeconds("11:34:45"))
        assertEquals(86399, timeStrToSeconds("23:59:59"))
    }

    @Test
    @Tag("Example")
    fun timeSecondsToStr() {
        assertEquals("10:00:00", timeSecondsToStr(36000))
        assertEquals("11:34:45", timeSecondsToStr(41685))
        assertEquals("23:59:59", timeSecondsToStr(86399))
    }

    @Test
    @Tag("Normal")
    fun dateStrToDigit() {
        assertEquals("15.07.2016", dateStrToDigit("15 июля 2016"))
        assertEquals("", dateStrToDigit("3 мартобря 1918"))
        assertEquals("18.11.2018", dateStrToDigit("18 ноября 2018"))
        assertEquals("", dateStrToDigit("23"))
        assertEquals("03.04.2011", dateStrToDigit("3 апреля 2011"))
    }

    @Test
    @Tag("Normal")
    fun dateDigitToStr() {
        assertEquals("15 июля 2016", dateDigitToStr("15.07.2016"))
        assertEquals("", dateDigitToStr("01.02.20.19"))
        assertEquals("", dateDigitToStr("28.00.2000"))
        assertEquals("3 апреля 2011", dateDigitToStr("03.04.2011"))
        assertEquals("", dateDigitToStr("ab.cd.ef"))
    }

    @Test
    @Tag("Hard")
    fun flattenPhoneNumber() {
        assertEquals("+79211234567", flattenPhoneNumber("+7 (921) 123-45-67"))
        assertEquals("123456798", flattenPhoneNumber("12 --  34- 5 -- 67 -98"))
        assertEquals("", flattenPhoneNumber("ab-123"))
        assertEquals("+12345", flattenPhoneNumber("+12 (3) 4-5"))
        assertEquals("", flattenPhoneNumber("134_+874"))
    }

    @Test
    @Tag("Normal")
    fun bestLongJump() {
        assertEquals(717, bestLongJump("706 % - 717 - 703"))
        assertEquals(-1, bestLongJump("% - - % -"))
        assertEquals(754, bestLongJump("700 717 707 % 754"))
        assertEquals(-1, bestLongJump("700 + 700"))
        assertEquals(2147483647, bestLongJump("% 1 - - 2147483647 0 2147483647 % 1543917836 - - 363569826 781014280 1414189317 - - 2147483647 - - 1001151406 - % 835908832 - 597588869 0 - - 2147483647 - 2147483647 0 773490118 0 1770527112 1 802203181 113596706 - - 1 - % - 51878729 % 1083674885 - % - - - - 2147483647 - 1 504291195 - 336693092"))
        assertEquals(2147483647, bestLongJump("1536099890 269172023 % 0 2147483647 % 2026569670 - % % % 1 - 2147483647 364014222 - - - - - 2147483647 % - 40718940 - - % 1 2147483647 - 2147483647 2147483647 1 2147483647 % % 1226081111 % % % - - % % 502416533 - 897077848 2147483647 2147483647 - - % - - % - - - 0 684351920 % - - - - % 1752907942 - 934516963 2147483647 % 1 - 1 2058769405 1 2147483647 - - 1909445629 - 1 1191955646 2147483647 - - - - - % % - 1832756424 - 1 1421458254 2147483647 - 2147483647 0 % % - - 1 % - 2147483647 1366740891 - % - - - - - 2147483647 - - - - - % - 0 % - - 2147483647 - 991006334 2147483647 - 2147483647 - % 1 % - 1871640537 % - % - 77900624 903776087 1275423651 2147483647 % - 1 - % 2147483647 2147483647 1227369590 528878838 2147483647 % % - - - - % 0 - - % % - - % 1 - - 1186962365 % - 1 - 2147483647 - - - - 2147483647 458863702 - % - 1 1 1 1259696787 % % 2147483647 % % % 1 - 0 2147483647 - - 2097543058 2051726302 1 - - 2111795966 - - - 526893590 1316780297 1 1 1566021844 - - - 1376685239 % - - 1669128140 2147483647 - - - 611048032 2147483647 0 % % - % 0 0 - - 1966199526 - 2147483647 1553142854 - 47265441 % - - 2147483647 - 2147483647 296898476 % - - - - 0 % 2147483647 % - 1875209535 0 2147483647 0 2147483647 % 1 - 2147483647 - - - - - % % % - - % 379678110 - - % - 1968771353 524764639 1054901169 % 0 446983754 % - 0 2147483647 2147483647 49584374 % 1725530295 % 0 279324459 - 2147483647 % 493612485 1681221625 % 114660926 % - - 2147483647 % - - 1 1395055082 1 % % - 1 - - - - 0 - 1 - 2147483647 2147483647 - - - - - 0 - - % 0 0 2147483647 0 401319717 - 241684339 - 2147483647 500058133 1 - - % 1 - % 1640830303 - 0 % - - - % 2147483647 - % 2147483647 2147483647 % 2147483647 447662443 1112341123 0 2147483647 % 2147483647 % 813245604 42981917 2142486203 0 % 0 % - % - 1465651403 % 2147483647 14135423 1673736818 2147483647 - 2147483647 - 291496965 - 1119856432 - 1994427706 1 1 2147483647 2147483647 % - 0 0 - % - 2147483647 % - 0 - 1 - - 2147483647 2147483647 - 121980169 - 1 0 - - 439889429 % % 0 0 - 1099998761 0 1 - - - 1332481097 2147483647 - 0 1 - - - - 879026505 - % % 2147483647 2147483647 - 602362281 % 974317036 1545456204 - 1230132119 - 0 - - - 1410609012 - 2147483647 - - 2147483647 1908362287 1547851872 149977397 - % - % - - - - - - 708004603 2147483647 - 2147483647 219396591 1321799816 2147483647 741802923 50098582 2147483647 1 - - - - 2147483647 1200941026 - % % 1110222441 - - - - % % 1 - 1 - - 2147483647 - 1430670496 2147483647 % - - - % - 1 - - - - % 2147483647 - % - 1 2147483647 % % - - 0 - - 2147483647 - 2147483647 % 2147483647 2147483647 % % 0 - 1424406914 - 1621338245 79091514 552666667 603419302 587962627 2147483647 - - - % - 106541655 - 0 - - - 680398421 - 1 9022151 % 1 1 - 947408265 1204219364 1972740978 % % 1058890579 70023800 2147483647 2147483647 - % - % 626914082 141211321 - - - - - - 2147483647 2147483647 1469655457 1944361470 1 1564702127 1236479748 0 - 334683105 - 1177483121 1941183469 2062932849 % - - 76299392 % 1 57323886 1 1533055996 - 2147483647 1 - 646296764 214758725 - - 1401191965 - - 0 - 1008417458 773235135 - - - - 686847519 958765389 1198455985 942314196 1 - 1054134446 % 2147483647 - - 1814557043 - % % % 385810815 - - 2033086893 - - 997803391 - - % - 0 1 122324857 - - 2147483647 0 302373793 % 2147483647 - 1 - - % 2147483647 2147483647 % - 2147483647 2147483647 1103134371 % % 43831421 2147483647 - - % - - - 860374312 379598563 514819240 - - 1379501086 % - - - - 0 - 1954059795 % 1 - 0 - 0 1 0 - - 1476635871 - 113126872 - - % - - - 0 1414916563 % 2147483647 660650730 2147483647 648970966 - - 2147483647 927761346 2147483647 1620623969 - 948947279 2147483647 - - - % - % 1 - 2147483647 2147483647 - - % % % - - - 1283579166 - - % - 1482519951 2147483647 - 671303570 - - 2147483647 1 - % 0 0 - - 1533828447 - 1 - 1 - 2147483647 - 317967863 - % 1 2147483647 2147483647 2147483647 - 2147483647 - 1 - - - 163093406 1011904788 0 % 644835661 2147483647 % - 99608153 0 144078013 % - - 767243103 - 0 - - 2147483647 272816932 - % % - 2147483647 - 2147483647 1 1014131422 2147483647 1 - 0 - - - - % - - 2147483647 % 2147483647 220752173 % % 2109375568 81995809 % % - - - - 1210576377 - % - % - 1 1978339614 - - 2147483647 1 % 2147483647 0 5833207 2147483647 - - - 164376966 - - - 1 - - - - - 2147483647 - - - - 2147483647 % 2147483647 - - 2147483647 - - - - - 0 365970959 - 1 - 2147483647 2147483647 407160753 - 1780530101 - - - 14897249 1770750960 - 1641830479 1452527636 1 - - - 1366644589 1 0 - 2147483647 - - - % 2147483647 - - - 1389463380 0 1794487600 - - - 0 - 1976777705 2147483647 % % - - - 1569229215 1 - 2147483647 326317322 - 2051393694 - % 707096661 % 2147483647 % % % 2147483647 % - % % % - 279456660 609717543 1600815971 0 - - 1 - - 2147483647 - 1721706426 2147483647 1162897246 % - 1 1501066218 1 2147483647 688071325 - % 1901092413 % 2147483647 - - - % - 2147483647 % - - - - 691508605 - 1 - - - - % 834586421 - % - - - 0 % - - 2147483647 2089455558 - 646445613 - - 0 0 1598964921 % - 731941618 1104615519 676318130 - 2147483647 1 1513756089 - 0 % - 1692212459 1534265127 - - % 2147483647 % - 2147483647 2078827823 1 - - 2147483647 - - - - % - 2069541142 763668874 - - - 2147483647 % - - - - - - 1003711232 - - 276939959 0 - 1254448362 1703801365 - % - % - 2147483647 - % - 1821329885 2142729136 519671479 - % - - 2147483647 - % 689865831 - 1684760936 % 694042517 - - - % 1 - 1723433533 - - - - % 2147483647 - - 2147483647 2147483647 - 2147483647 2147483647 % 2147483647 - - 1859692407 % - - 1906149338 - 752854230 - - % 0 % - - - - 220448689 478773839 % 2147483647 - 2147483647 - % - % - 656973224 2147483647 % - - - 2147483647 - - 2005951710 - 0 - - - - % 324239933 0 % 1046180027 1 - 1957534502 1 % 2147483647 % - 0 - 1637791030 2147483647 % - 0 - % - 1 - - % - - - % - - 0 - % - % - 2147483647 - % - 2147483647 - 2147483647 % 916863662 - - 1 85431815 - 749371491 - 1198066071 % - - 2147483647 220756895 2147483647 - - - % 0 % - % 2147483647 0 - - 1 0 1 2147483647 1502160541 - - 2147483647 - - 795151027 % % - - - - % 2147483647 - 2147483647 - - % 2147483647 - - - - - 2020311761 970413936 1 1 0 % 273906442 2147483647 - - 2069373790 - 2147483647 1751217954 % % - 1 - - 1817997991 - 874675924 259889873 1 % 2147483647 - - % 2092554970 1 0 494304475 - - % % 1 1 - % - - 2147483647 0 % % - % - 0 1242761033 - - 0 0 % 611302618 % 2147483647 1959143722 - - - - % 2147483647 1 475298770 - 0 1449716841 2147483647 - 1 - - 0 478226575 1 1 2147483647 894242167 1765539402 - 2147483647 492554108 756871410 - - - % 2147483647 % - 1234243060 1391992787 % 2147483647 - 2103617299 - - 1203938602 % - - 2147483647 2147483647 % - % 2147483647 - 1086621511 % - 2090830941 1344312829 % - 389341514 1 % 585377509 - 0 - % % - 875983204 % 1 667803350 654559350 - % 2147483647 - 725612715 - % 1 1245562594 - - 1 - - - 2002088969 - - % - - 0 2147483647 - - % - % 1 546804358 2147483647 2147483647 - - 1857657599 - - 2147483647 - 0 2147483647 1 1274844636 567511559"))
        assertEquals(2147483647, bestLongJump("       2147483647 %"))
    }


    @Test
    @Tag("Hard")
    fun bestHighJump() {
        assertEquals(226, bestHighJump("226 +"))
        assertEquals(-1, bestHighJump("???"))
        assertEquals(230, bestHighJump("220 + 224 %+ 228 %- 230 + 232 %%- 234 %"))
        assertEquals(-1, bestHighJump("147483648 %%-"))
        assertEquals(0, bestHighJump("0 %+"))
    }

    @Test
    @Tag("Hard")
    fun plusMinus() {
        assertEquals(0, plusMinus("0"))
        assertEquals(4, plusMinus("2 + 2"))
        assertEquals(6, plusMinus("2 + 31 - 40 + 13"))
        assertEquals(-1, plusMinus("0 - 1"))
    }

    @Test
    @Tag("Hard")
    fun firstDuplicateIndex() {
        assertEquals(-1, firstDuplicateIndex("Привет"))
        assertEquals(9, firstDuplicateIndex("Он пошёл в в школу"))
        assertEquals(40, firstDuplicateIndex("Яблоко упало на ветку с ветки оно упало на на землю"))
        assertEquals(9, firstDuplicateIndex("Мы пошли прямо Прямо располагался магазин"))
    }

    @Test
    @Tag("Hard")
    fun mostExpensive() {
        assertEquals("", mostExpensive(""))
        assertEquals("Курица", mostExpensive("Хлеб 39.9; Молоко 62.5; Курица 184.0; Конфеты 89.9"))
        assertEquals("Вино", mostExpensive("Вино 255.0"))
    }

    @Test
    @Tag("Hard")
    fun fromRoman() {
        assertEquals(1, fromRoman("I"))
        assertEquals(3000, fromRoman("MMM"))
        assertEquals(1978, fromRoman("MCMLXXVIII"))
        assertEquals(694, fromRoman("DCXCIV"))
        assertEquals(49, fromRoman("XLIX"))
        assertEquals(-1, fromRoman("Z"))
    }

    @Test
    @Tag("Hard")
    fun computeDeviceCells() {
        assertEquals(listOf(0, 0, 0, 0, 0, 1, 1, 1, 1, 1), computeDeviceCells(10, "+>+>+>+>+"))
        assertEquals(listOf(-1, -1, -1, -1, -1, 0, 0, 0, 0, 0), computeDeviceCells(10, "<-<-<-<-<-"))
        assertEquals(listOf(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), computeDeviceCells(10, "- <<<<< +[>+]"))
        assertEquals(listOf(0, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0),
                computeDeviceCells(11, "<<<<< + >>>>>>>>>> --[<-] >+[>+] >++{--< <[<] >+[>+] >++}"))
    }
}